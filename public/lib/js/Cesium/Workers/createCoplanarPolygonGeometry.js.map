{"version":3,"file":"createCoplanarPolygonGeometry.js","sources":["../../../../Source/Core/CoplanarPolygonGeometry.js","../../../../Source/WorkersES6/createCoplanarPolygonGeometry.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport CoplanarPolygonGeometryLibrary from \"./CoplanarPolygonGeometryLibrary.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryAttributes from \"./GeometryAttributes.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport PrimitiveType from \"./PrimitiveType.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport VertexFormat from \"./VertexFormat.js\";\n\nconst scratchPosition = new Cartesian3();\nconst scratchBR = new BoundingRectangle();\nconst stScratch = new Cartesian2();\nconst textureCoordinatesOrigin = new Cartesian2();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst centerScratch = new Cartesian3();\nconst axis1Scratch = new Cartesian3();\nconst axis2Scratch = new Cartesian3();\nconst quaternionScratch = new Quaternion();\nconst textureMatrixScratch = new Matrix3();\nconst tangentRotationScratch = new Matrix3();\nconst surfaceNormalScratch = new Cartesian3();\n\nfunction createGeometryFromPolygon(\n  polygon,\n  vertexFormat,\n  boundingRectangle,\n  stRotation,\n  hardcodedTextureCoordinates,\n  projectPointTo2D,\n  normal,\n  tangent,\n  bitangent\n) {\n  const positions = polygon.positions;\n  let indices = PolygonPipeline.triangulate(polygon.positions2D, polygon.holes);\n\n  /* If polygon is completely unrenderable, just use the first three vertices */\n  if (indices.length < 3) {\n    indices = [0, 1, 2];\n  }\n\n  const newIndices = IndexDatatype.createTypedArray(\n    positions.length,\n    indices.length\n  );\n  newIndices.set(indices);\n\n  let textureMatrix = textureMatrixScratch;\n  if (stRotation !== 0.0) {\n    let rotation = Quaternion.fromAxisAngle(\n      normal,\n      stRotation,\n      quaternionScratch\n    );\n    textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n    if (vertexFormat.tangent || vertexFormat.bitangent) {\n      rotation = Quaternion.fromAxisAngle(\n        normal,\n        -stRotation,\n        quaternionScratch\n      );\n      const tangentRotation = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationScratch\n      );\n\n      tangent = Cartesian3.normalize(\n        Matrix3.multiplyByVector(tangentRotation, tangent, tangent),\n        tangent\n      );\n      if (vertexFormat.bitangent) {\n        bitangent = Cartesian3.normalize(\n          Cartesian3.cross(normal, tangent, bitangent),\n          bitangent\n        );\n      }\n    }\n  } else {\n    textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n  }\n\n  const stOrigin = textureCoordinatesOrigin;\n  if (vertexFormat.st) {\n    stOrigin.x = boundingRectangle.x;\n    stOrigin.y = boundingRectangle.y;\n  }\n\n  const length = positions.length;\n  const size = length * 3;\n  const flatPositions = new Float64Array(size);\n  const normals = vertexFormat.normal ? new Float32Array(size) : undefined;\n  const tangents = vertexFormat.tangent ? new Float32Array(size) : undefined;\n  const bitangents = vertexFormat.bitangent\n    ? new Float32Array(size)\n    : undefined;\n  const textureCoordinates = vertexFormat.st\n    ? new Float32Array(length * 2)\n    : undefined;\n\n  let positionIndex = 0;\n  let normalIndex = 0;\n  let bitangentIndex = 0;\n  let tangentIndex = 0;\n  let stIndex = 0;\n\n  for (let i = 0; i < length; i++) {\n    const position = positions[i];\n    flatPositions[positionIndex++] = position.x;\n    flatPositions[positionIndex++] = position.y;\n    flatPositions[positionIndex++] = position.z;\n\n    if (vertexFormat.st) {\n      if (\n        defined(hardcodedTextureCoordinates) &&\n        hardcodedTextureCoordinates.positions.length === length\n      ) {\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].x;\n        textureCoordinates[stIndex++] =\n          hardcodedTextureCoordinates.positions[i].y;\n      } else {\n        const p = Matrix3.multiplyByVector(\n          textureMatrix,\n          position,\n          scratchPosition\n        );\n        const st = projectPointTo2D(p, stScratch);\n        Cartesian2.subtract(st, stOrigin, st);\n\n        const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n        const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n        textureCoordinates[stIndex++] = stx;\n        textureCoordinates[stIndex++] = sty;\n      }\n    }\n\n    if (vertexFormat.normal) {\n      normals[normalIndex++] = normal.x;\n      normals[normalIndex++] = normal.y;\n      normals[normalIndex++] = normal.z;\n    }\n\n    if (vertexFormat.tangent) {\n      tangents[tangentIndex++] = tangent.x;\n      tangents[tangentIndex++] = tangent.y;\n      tangents[tangentIndex++] = tangent.z;\n    }\n\n    if (vertexFormat.bitangent) {\n      bitangents[bitangentIndex++] = bitangent.x;\n      bitangents[bitangentIndex++] = bitangent.y;\n      bitangents[bitangentIndex++] = bitangent.z;\n    }\n  }\n\n  const attributes = new GeometryAttributes();\n\n  if (vertexFormat.position) {\n    attributes.position = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.DOUBLE,\n      componentsPerAttribute: 3,\n      values: flatPositions,\n    });\n  }\n\n  if (vertexFormat.normal) {\n    attributes.normal = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: normals,\n    });\n  }\n\n  if (vertexFormat.tangent) {\n    attributes.tangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: tangents,\n    });\n  }\n\n  if (vertexFormat.bitangent) {\n    attributes.bitangent = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 3,\n      values: bitangents,\n    });\n  }\n\n  if (vertexFormat.st) {\n    attributes.st = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.FLOAT,\n      componentsPerAttribute: 2,\n      values: textureCoordinates,\n    });\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: newIndices,\n    primitiveType: PrimitiveType.TRIANGLES,\n  });\n}\n\n/**\n * A description of a polygon composed of arbitrary coplanar positions.\n *\n * @alias CoplanarPolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n *\n * @example\n * const polygonGeometry = new Cesium.CoplanarPolygonGeometry({\n *  polygonHierarchy: new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArrayHeights([\n *      -90.0, 30.0, 0.0,\n *      -90.0, 30.0, 300000.0,\n *      -80.0, 30.0, 300000.0,\n *      -80.0, 30.0, 0.0\n *   ]))\n * });\n *\n */\nfunction CoplanarPolygonGeometry(options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n  const polygonHierarchy = options.polygonHierarchy;\n  const textureCoordinates = options.textureCoordinates;\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.polygonHierarchy\", polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._polygonHierarchy = polygonHierarchy;\n  this._stRotation = defaultValue(options.stRotation, 0.0);\n  this._ellipsoid = Ellipsoid.clone(\n    defaultValue(options.ellipsoid, Ellipsoid.WGS84)\n  );\n  this._workerName = \"createCoplanarPolygonGeometry\";\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3\n    ) +\n    VertexFormat.packedLength +\n    Ellipsoid.packedLength +\n    (defined(textureCoordinates)\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\n          textureCoordinates,\n          Cartesian2\n        )\n      : 1) +\n    2;\n}\n\n/**\n * A description of a coplanar polygon from an array of positions.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points.\n * @returns {CoplanarPolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.CoplanarPolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nCoplanarPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    textureCoordinates: options.textureCoordinates,\n  };\n  return new CoplanarPolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {CoplanarPolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nCoplanarPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._stRotation;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n      value._textureCoordinates,\n      array,\n      startingIndex,\n      Cartesian2\n    );\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\nconst scratchOptions = {\n  polygonHierarchy: {},\n};\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {CoplanarPolygonGeometry} [result] The object into which to store the result.\n * @returns {CoplanarPolygonGeometry} The modified result parameter or a new CoplanarPolygonGeometry instance if one was not provided.\n */\nCoplanarPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const stRotation = array[startingIndex++];\n  const textureCoordinates =\n    array[startingIndex] === -1.0\n      ? undefined\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\n          array,\n          startingIndex,\n          Cartesian2\n        );\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n\n  if (!defined(result)) {\n    result = new CoplanarPolygonGeometry(scratchOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._stRotation = stRotation;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Computes the geometric representation of an arbitrary coplanar polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {CoplanarPolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nCoplanarPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const stRotation = polygonGeometry._stRotation;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n  const hasTextureCoordinates = defined(textureCoordinates);\n\n  let outerPositions = polygonHierarchy.positions;\n  outerPositions = arrayRemoveDuplicates(\n    outerPositions,\n    Cartesian3.equalsEpsilon,\n    true\n  );\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  let normal = scratchNormal;\n  let tangent = scratchTangent;\n  let bitangent = scratchBitangent;\n  let axis1 = axis1Scratch;\n  const axis2 = axis2Scratch;\n\n  const validGeometry = CoplanarPolygonGeometryLibrary.computeProjectTo2DArguments(\n    outerPositions,\n    centerScratch,\n    axis1,\n    axis2\n  );\n  if (!validGeometry) {\n    return undefined;\n  }\n\n  normal = Cartesian3.cross(axis1, axis2, normal);\n  normal = Cartesian3.normalize(normal, normal);\n\n  if (\n    !Cartesian3.equalsEpsilon(\n      centerScratch,\n      Cartesian3.ZERO,\n      CesiumMath.EPSILON6\n    )\n  ) {\n    const surfaceNormal = polygonGeometry._ellipsoid.geodeticSurfaceNormal(\n      centerScratch,\n      surfaceNormalScratch\n    );\n    if (Cartesian3.dot(normal, surfaceNormal) < 0) {\n      normal = Cartesian3.negate(normal, normal);\n      axis1 = Cartesian3.negate(axis1, axis1);\n    }\n  }\n\n  const projectPoints = CoplanarPolygonGeometryLibrary.createProjectPointsTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n  const projectPoint = CoplanarPolygonGeometryLibrary.createProjectPointTo2DFunction(\n    centerScratch,\n    axis1,\n    axis2\n  );\n\n  if (vertexFormat.tangent) {\n    tangent = Cartesian3.clone(axis1, tangent);\n  }\n  if (vertexFormat.bitangent) {\n    bitangent = Cartesian3.clone(axis2, bitangent);\n  }\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    hasTextureCoordinates,\n    projectPoints,\n    false\n  );\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n\n  const textureCoordinatePolygons = hasTextureCoordinates\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\n        textureCoordinates,\n        true,\n        dummyFunction,\n        false\n      ).polygons\n    : undefined;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n  outerPositions = hierarchy[0].outerRing;\n\n  const boundingSphere = BoundingSphere.fromPoints(outerPositions);\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    normal,\n    projectPoint,\n    outerPositions,\n    stRotation,\n    scratchBR\n  );\n\n  const geometries = [];\n  for (let i = 0; i < polygons.length; i++) {\n    const geometryInstance = new GeometryInstance({\n      geometry: createGeometryFromPolygon(\n        polygons[i],\n        vertexFormat,\n        boundingRectangle,\n        stRotation,\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n        projectPoint,\n        normal,\n        tangent,\n        bitangent\n      ),\n    });\n\n    geometries.push(geometryInstance);\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  const attributes = geometry.attributes;\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n  });\n};\nexport default CoplanarPolygonGeometry;\n","import CoplanarPolygonGeometry from \"../Core/CoplanarPolygonGeometry.js\";\nimport defined from \"../Core/defined.js\";\n\nfunction createCoplanarPolygonGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = CoplanarPolygonGeometry.unpack(polygonGeometry, offset);\n  }\n  return CoplanarPolygonGeometry.createGeometry(polygonGeometry);\n}\nexport default createCoplanarPolygonGeometry;\n"],"names":["scratchPosition","Cartesian3","scratchBR","BoundingRectangle","stScratch","Cartesian2","textureCoordinatesOrigin","scratchNormal","scratchTangent","scratchBitangent","centerScratch","axis1Scratch","axis2Scratch","quaternionScratch","Quaternion","textureMatrixScratch","Matrix3","tangentRotationScratch","surfaceNormalScratch","createGeometryFromPolygon","polygon","vertexFormat","boundingRectangle","stRotation","hardcodedTextureCoordinates","projectPointTo2D","normal","tangent","bitangent","positions","indices","PolygonPipeline","triangulate","positions2D","holes","length","newIndices","IndexDatatype","createTypedArray","set","textureMatrix","rotation","fromAxisAngle","fromQuaternion","tangentRotation","normalize","multiplyByVector","cross","clone","IDENTITY","stOrigin","st","x","y","size","flatPositions","Float64Array","normals","Float32Array","undefined","tangents","bitangents","textureCoordinates","positionIndex","normalIndex","bitangentIndex","tangentIndex","stIndex","i","position","z","defined","subtract","stx","CesiumMath","clamp","width","sty","height","attributes","GeometryAttributes","GeometryAttribute","componentDatatype","ComponentDatatype","DOUBLE","componentsPerAttribute","values","FLOAT","Geometry","primitiveType","PrimitiveType","TRIANGLES","CoplanarPolygonGeometry","options","polygonHierarchy","defaultValue","EMPTY_OBJECT","Check","VertexFormat","DEFAULT","this","_vertexFormat","_polygonHierarchy","_stRotation","_ellipsoid","Ellipsoid","ellipsoid","WGS84","_workerName","_textureCoordinates","packedLength","PolygonGeometryLibrary","computeHierarchyPackedLength","fromPositions","pack","value","array","startingIndex","typeOf","object","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","scratchOptions","unpack","result","unpackPolygonHierarchy","createGeometry","polygonGeometry","hasTextureCoordinates","outerPositions","arrayRemoveDuplicates","equalsEpsilon","axis1","axis2","CoplanarPolygonGeometryLibrary","computeProjectTo2DArguments","ZERO","EPSILON6","surfaceNormal","geodeticSurfaceNormal","dot","negate","projectPoints","createProjectPointsTo2DFunction","projectPoint","createProjectPointTo2DFunction","results","polygonsFromHierarchy","hierarchy","polygons","textureCoordinatePolygons","identity","outerRing","boundingSphere","BoundingSphere","fromPoints","computeBoundingRectangle","geometries","geometryInstance","GeometryInstance","geometry","push","GeometryPipeline","combineInstances","offset"],"mappings":"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"}