{"version":3,"file":"createPolygonGeometry.js","sources":["../../../../Source/Core/PolygonGeometry.js","../../../../Source/WorkersES6/createPolygonGeometry.js"],"sourcesContent":["import ArcType from \"./ArcType.js\";\nimport arrayFill from \"./arrayFill.js\";\nimport BoundingRectangle from \"./BoundingRectangle.js\";\nimport BoundingSphere from \"./BoundingSphere.js\";\nimport Cartesian2 from \"./Cartesian2.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport Check from \"./Check.js\";\nimport ComponentDatatype from \"./ComponentDatatype.js\";\nimport defaultValue from \"./defaultValue.js\";\nimport defined from \"./defined.js\";\nimport DeveloperError from \"./DeveloperError.js\";\nimport Ellipsoid from \"./Ellipsoid.js\";\nimport EllipsoidGeodesic from \"./EllipsoidGeodesic.js\";\nimport EllipsoidTangentPlane from \"./EllipsoidTangentPlane.js\";\nimport Geometry from \"./Geometry.js\";\nimport GeometryAttribute from \"./GeometryAttribute.js\";\nimport GeometryInstance from \"./GeometryInstance.js\";\nimport GeometryOffsetAttribute from \"./GeometryOffsetAttribute.js\";\nimport GeometryPipeline from \"./GeometryPipeline.js\";\nimport IndexDatatype from \"./IndexDatatype.js\";\nimport CesiumMath from \"./Math.js\";\nimport Matrix3 from \"./Matrix3.js\";\nimport PolygonGeometryLibrary from \"./PolygonGeometryLibrary.js\";\nimport PolygonPipeline from \"./PolygonPipeline.js\";\nimport Quaternion from \"./Quaternion.js\";\nimport Rectangle from \"./Rectangle.js\";\nimport VertexFormat from \"./VertexFormat.js\";\nimport WindingOrder from \"./WindingOrder.js\";\n\nconst scratchCarto1 = new Cartographic();\nconst scratchCarto2 = new Cartographic();\nfunction adjustPosHeightsForNormal(position, p1, p2, ellipsoid) {\n  const carto1 = ellipsoid.cartesianToCartographic(position, scratchCarto1);\n  const height = carto1.height;\n  const p1Carto = ellipsoid.cartesianToCartographic(p1, scratchCarto2);\n  p1Carto.height = height;\n  ellipsoid.cartographicToCartesian(p1Carto, p1);\n\n  const p2Carto = ellipsoid.cartesianToCartographic(p2, scratchCarto2);\n  p2Carto.height = height - 100;\n  ellipsoid.cartographicToCartesian(p2Carto, p2);\n}\n\nconst scratchBoundingRectangle = new BoundingRectangle();\nconst scratchPosition = new Cartesian3();\nconst scratchNormal = new Cartesian3();\nconst scratchTangent = new Cartesian3();\nconst scratchBitangent = new Cartesian3();\nconst p1Scratch = new Cartesian3();\nconst p2Scratch = new Cartesian3();\nlet scratchPerPosNormal = new Cartesian3();\nlet scratchPerPosTangent = new Cartesian3();\nlet scratchPerPosBitangent = new Cartesian3();\n\nconst appendTextureCoordinatesOrigin = new Cartesian2();\nconst appendTextureCoordinatesCartesian2 = new Cartesian2();\nconst appendTextureCoordinatesCartesian3 = new Cartesian3();\nconst appendTextureCoordinatesQuaternion = new Quaternion();\nconst appendTextureCoordinatesMatrix3 = new Matrix3();\nconst tangentMatrixScratch = new Matrix3();\n\nfunction computeAttributes(options) {\n  const vertexFormat = options.vertexFormat;\n  const geometry = options.geometry;\n  const shadowVolume = options.shadowVolume;\n  const flatPositions = geometry.attributes.position.values;\n  const flatTexcoords = defined(geometry.attributes.st)\n    ? geometry.attributes.st.values\n    : undefined;\n\n  let length = flatPositions.length;\n  const wall = options.wall;\n  const top = options.top || wall;\n  const bottom = options.bottom || wall;\n  if (\n    vertexFormat.st ||\n    vertexFormat.normal ||\n    vertexFormat.tangent ||\n    vertexFormat.bitangent ||\n    shadowVolume\n  ) {\n    // PERFORMANCE_IDEA: Compute before subdivision, then just interpolate during subdivision.\n    // PERFORMANCE_IDEA: Compute with createGeometryFromPositions() for fast path when there's no holes.\n    const boundingRectangle = options.boundingRectangle;\n    const tangentPlane = options.tangentPlane;\n    const ellipsoid = options.ellipsoid;\n    const stRotation = options.stRotation;\n    const perPositionHeight = options.perPositionHeight;\n\n    const origin = appendTextureCoordinatesOrigin;\n    origin.x = boundingRectangle.x;\n    origin.y = boundingRectangle.y;\n\n    const textureCoordinates = vertexFormat.st\n      ? new Float32Array(2 * (length / 3))\n      : undefined;\n    let normals;\n    if (vertexFormat.normal) {\n      if (perPositionHeight && top && !wall) {\n        normals = geometry.attributes.normal.values;\n      } else {\n        normals = new Float32Array(length);\n      }\n    }\n    const tangents = vertexFormat.tangent\n      ? new Float32Array(length)\n      : undefined;\n    const bitangents = vertexFormat.bitangent\n      ? new Float32Array(length)\n      : undefined;\n    const extrudeNormals = shadowVolume ? new Float32Array(length) : undefined;\n\n    let textureCoordIndex = 0;\n    let attrIndex = 0;\n\n    let normal = scratchNormal;\n    let tangent = scratchTangent;\n    let bitangent = scratchBitangent;\n    let recomputeNormal = true;\n\n    let textureMatrix = appendTextureCoordinatesMatrix3;\n    let tangentRotationMatrix = tangentMatrixScratch;\n    if (stRotation !== 0.0) {\n      let rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      textureMatrix = Matrix3.fromQuaternion(rotation, textureMatrix);\n\n      rotation = Quaternion.fromAxisAngle(\n        tangentPlane._plane.normal,\n        -stRotation,\n        appendTextureCoordinatesQuaternion\n      );\n      tangentRotationMatrix = Matrix3.fromQuaternion(\n        rotation,\n        tangentRotationMatrix\n      );\n    } else {\n      textureMatrix = Matrix3.clone(Matrix3.IDENTITY, textureMatrix);\n      tangentRotationMatrix = Matrix3.clone(\n        Matrix3.IDENTITY,\n        tangentRotationMatrix\n      );\n    }\n\n    let bottomOffset = 0;\n    let bottomOffset2 = 0;\n\n    if (top && bottom) {\n      bottomOffset = length / 2;\n      bottomOffset2 = length / 3;\n\n      length /= 2;\n    }\n\n    for (let i = 0; i < length; i += 3) {\n      const position = Cartesian3.fromArray(\n        flatPositions,\n        i,\n        appendTextureCoordinatesCartesian3\n      );\n\n      if (vertexFormat.st) {\n        if (!defined(flatTexcoords)) {\n          let p = Matrix3.multiplyByVector(\n            textureMatrix,\n            position,\n            scratchPosition\n          );\n          p = ellipsoid.scaleToGeodeticSurface(p, p);\n          const st = tangentPlane.projectPointOntoPlane(\n            p,\n            appendTextureCoordinatesCartesian2\n          );\n          Cartesian2.subtract(st, origin, st);\n\n          const stx = CesiumMath.clamp(st.x / boundingRectangle.width, 0, 1);\n          const sty = CesiumMath.clamp(st.y / boundingRectangle.height, 0, 1);\n          if (bottom) {\n            textureCoordinates[textureCoordIndex + bottomOffset2] = stx;\n            textureCoordinates[textureCoordIndex + 1 + bottomOffset2] = sty;\n          }\n          if (top) {\n            textureCoordinates[textureCoordIndex] = stx;\n            textureCoordinates[textureCoordIndex + 1] = sty;\n          }\n\n          textureCoordIndex += 2;\n        }\n      }\n\n      if (\n        vertexFormat.normal ||\n        vertexFormat.tangent ||\n        vertexFormat.bitangent ||\n        shadowVolume\n      ) {\n        const attrIndex1 = attrIndex + 1;\n        const attrIndex2 = attrIndex + 2;\n\n        if (wall) {\n          if (i + 3 < length) {\n            const p1 = Cartesian3.fromArray(flatPositions, i + 3, p1Scratch);\n\n            if (recomputeNormal) {\n              const p2 = Cartesian3.fromArray(\n                flatPositions,\n                i + length,\n                p2Scratch\n              );\n              if (perPositionHeight) {\n                adjustPosHeightsForNormal(position, p1, p2, ellipsoid);\n              }\n              Cartesian3.subtract(p1, position, p1);\n              Cartesian3.subtract(p2, position, p2);\n              normal = Cartesian3.normalize(\n                Cartesian3.cross(p2, p1, normal),\n                normal\n              );\n              recomputeNormal = false;\n            }\n\n            if (Cartesian3.equalsEpsilon(p1, position, CesiumMath.EPSILON10)) {\n              // if we've reached a corner\n              recomputeNormal = true;\n            }\n          }\n\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            bitangent = ellipsoid.geodeticSurfaceNormal(position, bitangent);\n            if (vertexFormat.tangent) {\n              tangent = Cartesian3.normalize(\n                Cartesian3.cross(bitangent, normal, tangent),\n                tangent\n              );\n            }\n          }\n        } else {\n          normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          if (vertexFormat.tangent || vertexFormat.bitangent) {\n            if (perPositionHeight) {\n              scratchPerPosNormal = Cartesian3.fromArray(\n                normals,\n                attrIndex,\n                scratchPerPosNormal\n              );\n              scratchPerPosTangent = Cartesian3.cross(\n                Cartesian3.UNIT_Z,\n                scratchPerPosNormal,\n                scratchPerPosTangent\n              );\n              scratchPerPosTangent = Cartesian3.normalize(\n                Matrix3.multiplyByVector(\n                  tangentRotationMatrix,\n                  scratchPerPosTangent,\n                  scratchPerPosTangent\n                ),\n                scratchPerPosTangent\n              );\n              if (vertexFormat.bitangent) {\n                scratchPerPosBitangent = Cartesian3.normalize(\n                  Cartesian3.cross(\n                    scratchPerPosNormal,\n                    scratchPerPosTangent,\n                    scratchPerPosBitangent\n                  ),\n                  scratchPerPosBitangent\n                );\n              }\n            }\n\n            tangent = Cartesian3.cross(Cartesian3.UNIT_Z, normal, tangent);\n            tangent = Cartesian3.normalize(\n              Matrix3.multiplyByVector(tangentRotationMatrix, tangent, tangent),\n              tangent\n            );\n            if (vertexFormat.bitangent) {\n              bitangent = Cartesian3.normalize(\n                Cartesian3.cross(normal, tangent, bitangent),\n                bitangent\n              );\n            }\n          }\n        }\n\n        if (vertexFormat.normal) {\n          if (options.wall) {\n            normals[attrIndex + bottomOffset] = normal.x;\n            normals[attrIndex1 + bottomOffset] = normal.y;\n            normals[attrIndex2 + bottomOffset] = normal.z;\n          } else if (bottom) {\n            normals[attrIndex + bottomOffset] = -normal.x;\n            normals[attrIndex1 + bottomOffset] = -normal.y;\n            normals[attrIndex2 + bottomOffset] = -normal.z;\n          }\n\n          if ((top && !perPositionHeight) || wall) {\n            normals[attrIndex] = normal.x;\n            normals[attrIndex1] = normal.y;\n            normals[attrIndex2] = normal.z;\n          }\n        }\n\n        if (shadowVolume) {\n          if (wall) {\n            normal = ellipsoid.geodeticSurfaceNormal(position, normal);\n          }\n          extrudeNormals[attrIndex + bottomOffset] = -normal.x;\n          extrudeNormals[attrIndex1 + bottomOffset] = -normal.y;\n          extrudeNormals[attrIndex2 + bottomOffset] = -normal.z;\n        }\n\n        if (vertexFormat.tangent) {\n          if (options.wall) {\n            tangents[attrIndex + bottomOffset] = tangent.x;\n            tangents[attrIndex1 + bottomOffset] = tangent.y;\n            tangents[attrIndex2 + bottomOffset] = tangent.z;\n          } else if (bottom) {\n            tangents[attrIndex + bottomOffset] = -tangent.x;\n            tangents[attrIndex1 + bottomOffset] = -tangent.y;\n            tangents[attrIndex2 + bottomOffset] = -tangent.z;\n          }\n\n          if (top) {\n            if (perPositionHeight) {\n              tangents[attrIndex] = scratchPerPosTangent.x;\n              tangents[attrIndex1] = scratchPerPosTangent.y;\n              tangents[attrIndex2] = scratchPerPosTangent.z;\n            } else {\n              tangents[attrIndex] = tangent.x;\n              tangents[attrIndex1] = tangent.y;\n              tangents[attrIndex2] = tangent.z;\n            }\n          }\n        }\n\n        if (vertexFormat.bitangent) {\n          if (bottom) {\n            bitangents[attrIndex + bottomOffset] = bitangent.x;\n            bitangents[attrIndex1 + bottomOffset] = bitangent.y;\n            bitangents[attrIndex2 + bottomOffset] = bitangent.z;\n          }\n          if (top) {\n            if (perPositionHeight) {\n              bitangents[attrIndex] = scratchPerPosBitangent.x;\n              bitangents[attrIndex1] = scratchPerPosBitangent.y;\n              bitangents[attrIndex2] = scratchPerPosBitangent.z;\n            } else {\n              bitangents[attrIndex] = bitangent.x;\n              bitangents[attrIndex1] = bitangent.y;\n              bitangents[attrIndex2] = bitangent.z;\n            }\n          }\n        }\n        attrIndex += 3;\n      }\n    }\n\n    if (vertexFormat.st && !defined(flatTexcoords)) {\n      geometry.attributes.st = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 2,\n        values: textureCoordinates,\n      });\n    }\n\n    if (vertexFormat.normal) {\n      geometry.attributes.normal = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: normals,\n      });\n    }\n\n    if (vertexFormat.tangent) {\n      geometry.attributes.tangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: tangents,\n      });\n    }\n\n    if (vertexFormat.bitangent) {\n      geometry.attributes.bitangent = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: bitangents,\n      });\n    }\n\n    if (shadowVolume) {\n      geometry.attributes.extrudeDirection = new GeometryAttribute({\n        componentDatatype: ComponentDatatype.FLOAT,\n        componentsPerAttribute: 3,\n        values: extrudeNormals,\n      });\n    }\n  }\n\n  if (options.extrude && defined(options.offsetAttribute)) {\n    const size = flatPositions.length / 3;\n    let offsetAttribute = new Uint8Array(size);\n\n    if (options.offsetAttribute === GeometryOffsetAttribute.TOP) {\n      if ((top && bottom) || wall) {\n        offsetAttribute = arrayFill(offsetAttribute, 1, 0, size / 2);\n      } else if (top) {\n        offsetAttribute = arrayFill(offsetAttribute, 1);\n      }\n    } else {\n      const offsetValue =\n        options.offsetAttribute === GeometryOffsetAttribute.NONE ? 0 : 1;\n      offsetAttribute = arrayFill(offsetAttribute, offsetValue);\n    }\n\n    geometry.attributes.applyOffset = new GeometryAttribute({\n      componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n      componentsPerAttribute: 1,\n      values: offsetAttribute,\n    });\n  }\n\n  return geometry;\n}\n\nconst startCartographicScratch = new Cartographic();\nconst endCartographicScratch = new Cartographic();\nconst idlCross = {\n  westOverIDL: 0.0,\n  eastOverIDL: 0.0,\n};\nlet ellipsoidGeodesic = new EllipsoidGeodesic();\nfunction computeRectangle(positions, ellipsoid, arcType, granularity, result) {\n  result = defaultValue(result, new Rectangle());\n  if (!defined(positions) || positions.length < 3) {\n    result.west = 0.0;\n    result.north = 0.0;\n    result.south = 0.0;\n    result.east = 0.0;\n    return result;\n  }\n\n  if (arcType === ArcType.RHUMB) {\n    return Rectangle.fromCartesianArray(positions, ellipsoid, result);\n  }\n\n  if (!ellipsoidGeodesic.ellipsoid.equals(ellipsoid)) {\n    ellipsoidGeodesic = new EllipsoidGeodesic(undefined, undefined, ellipsoid);\n  }\n\n  result.west = Number.POSITIVE_INFINITY;\n  result.east = Number.NEGATIVE_INFINITY;\n  result.south = Number.POSITIVE_INFINITY;\n  result.north = Number.NEGATIVE_INFINITY;\n\n  idlCross.westOverIDL = Number.POSITIVE_INFINITY;\n  idlCross.eastOverIDL = Number.NEGATIVE_INFINITY;\n\n  const inverseChordLength =\n    1.0 / CesiumMath.chordLength(granularity, ellipsoid.maximumRadius);\n  const positionsLength = positions.length;\n  let endCartographic = ellipsoid.cartesianToCartographic(\n    positions[0],\n    endCartographicScratch\n  );\n  let startCartographic = startCartographicScratch;\n  let swap;\n\n  for (let i = 1; i < positionsLength; i++) {\n    swap = startCartographic;\n    startCartographic = endCartographic;\n    endCartographic = ellipsoid.cartesianToCartographic(positions[i], swap);\n    ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n    interpolateAndGrowRectangle(\n      ellipsoidGeodesic,\n      inverseChordLength,\n      result,\n      idlCross\n    );\n  }\n\n  swap = startCartographic;\n  startCartographic = endCartographic;\n  endCartographic = ellipsoid.cartesianToCartographic(positions[0], swap);\n  ellipsoidGeodesic.setEndPoints(startCartographic, endCartographic);\n  interpolateAndGrowRectangle(\n    ellipsoidGeodesic,\n    inverseChordLength,\n    result,\n    idlCross\n  );\n\n  if (result.east - result.west > idlCross.eastOverIDL - idlCross.westOverIDL) {\n    result.west = idlCross.westOverIDL;\n    result.east = idlCross.eastOverIDL;\n\n    if (result.east > CesiumMath.PI) {\n      result.east = result.east - CesiumMath.TWO_PI;\n    }\n    if (result.west > CesiumMath.PI) {\n      result.west = result.west - CesiumMath.TWO_PI;\n    }\n  }\n\n  return result;\n}\n\nconst interpolatedCartographicScratch = new Cartographic();\nfunction interpolateAndGrowRectangle(\n  ellipsoidGeodesic,\n  inverseChordLength,\n  result,\n  idlCross\n) {\n  const segmentLength = ellipsoidGeodesic.surfaceDistance;\n\n  const numPoints = Math.ceil(segmentLength * inverseChordLength);\n  const subsegmentDistance =\n    numPoints > 0 ? segmentLength / (numPoints - 1) : Number.POSITIVE_INFINITY;\n  let interpolationDistance = 0.0;\n\n  for (let i = 0; i < numPoints; i++) {\n    const interpolatedCartographic = ellipsoidGeodesic.interpolateUsingSurfaceDistance(\n      interpolationDistance,\n      interpolatedCartographicScratch\n    );\n    interpolationDistance += subsegmentDistance;\n    const longitude = interpolatedCartographic.longitude;\n    const latitude = interpolatedCartographic.latitude;\n\n    result.west = Math.min(result.west, longitude);\n    result.east = Math.max(result.east, longitude);\n    result.south = Math.min(result.south, latitude);\n    result.north = Math.max(result.north, latitude);\n\n    const lonAdjusted =\n      longitude >= 0 ? longitude : longitude + CesiumMath.TWO_PI;\n    idlCross.westOverIDL = Math.min(idlCross.westOverIDL, lonAdjusted);\n    idlCross.eastOverIDL = Math.max(idlCross.eastOverIDL, lonAdjusted);\n  }\n}\n\nconst createGeometryFromPositionsExtrudedPositions = [];\n\nfunction createGeometryFromPositionsExtruded(\n  ellipsoid,\n  polygon,\n  textureCoordinates,\n  granularity,\n  hierarchy,\n  perPositionHeight,\n  closeTop,\n  closeBottom,\n  vertexFormat,\n  arcType\n) {\n  const geos = {\n    walls: [],\n  };\n  let i;\n\n  if (closeTop || closeBottom) {\n    const topGeo = PolygonGeometryLibrary.createGeometryFromPositions(\n      ellipsoid,\n      polygon,\n      textureCoordinates,\n      granularity,\n      perPositionHeight,\n      vertexFormat,\n      arcType\n    );\n\n    const edgePoints = topGeo.attributes.position.values;\n    const indices = topGeo.indices;\n    let numPositions;\n    let newIndices;\n\n    if (closeTop && closeBottom) {\n      const topBottomPositions = edgePoints.concat(edgePoints);\n\n      numPositions = topBottomPositions.length / 3;\n\n      newIndices = IndexDatatype.createTypedArray(\n        numPositions,\n        indices.length * 2\n      );\n      newIndices.set(indices);\n      const ilength = indices.length;\n\n      const length = numPositions / 2;\n\n      for (i = 0; i < ilength; i += 3) {\n        const i0 = newIndices[i] + length;\n        const i1 = newIndices[i + 1] + length;\n        const i2 = newIndices[i + 2] + length;\n\n        newIndices[i + ilength] = i2;\n        newIndices[i + 1 + ilength] = i1;\n        newIndices[i + 2 + ilength] = i0;\n      }\n\n      topGeo.attributes.position.values = topBottomPositions;\n      if (perPositionHeight && vertexFormat.normal) {\n        const normals = topGeo.attributes.normal.values;\n        topGeo.attributes.normal.values = new Float32Array(\n          topBottomPositions.length\n        );\n        topGeo.attributes.normal.values.set(normals);\n      }\n\n      if (vertexFormat.st && defined(textureCoordinates)) {\n        const texcoords = topGeo.attributes.st.values;\n        topGeo.attributes.st.values = new Float32Array(numPositions * 2);\n        topGeo.attributes.st.values = texcoords.concat(texcoords);\n      }\n\n      topGeo.indices = newIndices;\n    } else if (closeBottom) {\n      numPositions = edgePoints.length / 3;\n      newIndices = IndexDatatype.createTypedArray(numPositions, indices.length);\n\n      for (i = 0; i < indices.length; i += 3) {\n        newIndices[i] = indices[i + 2];\n        newIndices[i + 1] = indices[i + 1];\n        newIndices[i + 2] = indices[i];\n      }\n\n      topGeo.indices = newIndices;\n    }\n\n    geos.topAndBottom = new GeometryInstance({\n      geometry: topGeo,\n    });\n  }\n\n  let outerRing = hierarchy.outerRing;\n  let tangentPlane = EllipsoidTangentPlane.fromPoints(outerRing, ellipsoid);\n  let positions2D = tangentPlane.projectPointsOntoPlane(\n    outerRing,\n    createGeometryFromPositionsExtrudedPositions\n  );\n\n  let windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n  if (windingOrder === WindingOrder.CLOCKWISE) {\n    outerRing = outerRing.slice().reverse();\n  }\n\n  let wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n    outerRing,\n    textureCoordinates,\n    ellipsoid,\n    granularity,\n    perPositionHeight,\n    arcType\n  );\n  geos.walls.push(\n    new GeometryInstance({\n      geometry: wallGeo,\n    })\n  );\n\n  const holes = hierarchy.holes;\n  for (i = 0; i < holes.length; i++) {\n    let hole = holes[i];\n\n    tangentPlane = EllipsoidTangentPlane.fromPoints(hole, ellipsoid);\n    positions2D = tangentPlane.projectPointsOntoPlane(\n      hole,\n      createGeometryFromPositionsExtrudedPositions\n    );\n\n    windingOrder = PolygonPipeline.computeWindingOrder2D(positions2D);\n    if (windingOrder === WindingOrder.COUNTER_CLOCKWISE) {\n      hole = hole.slice().reverse();\n    }\n\n    wallGeo = PolygonGeometryLibrary.computeWallGeometry(\n      hole,\n      textureCoordinates,\n      ellipsoid,\n      granularity,\n      perPositionHeight,\n      arcType\n    );\n    geos.walls.push(\n      new GeometryInstance({\n        geometry: wallGeo,\n      })\n    );\n  }\n\n  return geos;\n}\n\n/**\n * A description of a polygon on the ellipsoid. The polygon is defined by a polygon hierarchy. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @alias PolygonGeometry\n * @constructor\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.height=0.0] The distance in meters between the polygon and the ellipsoid surface.\n * @param {Number} [options.extrudedHeight] The distance in meters between the polygon's extruded face and the ellipsoid surface.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n *\n * @see PolygonGeometry#createGeometry\n * @see PolygonGeometry#fromPositions\n *\n * @demo {@link https://sandcastle.cesium.com/index.html?src=Polygon.html|Cesium Sandcastle Polygon Demo}\n *\n * @example\n * // 1. create a polygon from points\n * const polygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * // 2. create a nested polygon with holes\n * const polygonWithHole = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -109.0, 30.0,\n *       -95.0, 30.0,\n *       -95.0, 40.0,\n *       -109.0, 40.0\n *     ]),\n *     [new Cesium.PolygonHierarchy(\n *       Cesium.Cartesian3.fromDegreesArray([\n *         -107.0, 31.0,\n *         -107.0, 39.0,\n *         -97.0, 39.0,\n *         -97.0, 31.0\n *       ]),\n *       [new Cesium.PolygonHierarchy(\n *         Cesium.Cartesian3.fromDegreesArray([\n *           -105.0, 33.0,\n *           -99.0, 33.0,\n *           -99.0, 37.0,\n *           -105.0, 37.0\n *         ]),\n *         [new Cesium.PolygonHierarchy(\n *           Cesium.Cartesian3.fromDegreesArray([\n *             -103.0, 34.0,\n *             -101.0, 34.0,\n *             -101.0, 36.0,\n *             -103.0, 36.0\n *           ])\n *         )]\n *       )]\n *     )]\n *   )\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygonWithHole);\n *\n * // 3. create extruded polygon\n * const extrudedPolygon = new Cesium.PolygonGeometry({\n *   polygonHierarchy : new Cesium.PolygonHierarchy(\n *     Cesium.Cartesian3.fromDegreesArray([\n *       -72.0, 40.0,\n *       -70.0, 35.0,\n *       -75.0, 30.0,\n *       -70.0, 30.0,\n *       -68.0, 40.0\n *     ])\n *   ),\n *   extrudedHeight: 300000\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(extrudedPolygon);\n */\nfunction PolygonGeometry(options) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  if (\n    defined(options.perPositionHeight) &&\n    options.perPositionHeight &&\n    defined(options.height)\n  ) {\n    throw new DeveloperError(\n      \"Cannot use both options.perPositionHeight and options.height\"\n    );\n  }\n  if (\n    defined(options.arcType) &&\n    options.arcType !== ArcType.GEODESIC &&\n    options.arcType !== ArcType.RHUMB\n  ) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const vertexFormat = defaultValue(options.vertexFormat, VertexFormat.DEFAULT);\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const stRotation = defaultValue(options.stRotation, 0.0);\n  const textureCoordinates = options.textureCoordinates;\n  const perPositionHeight = defaultValue(options.perPositionHeight, false);\n  const perPositionHeightExtrude =\n    perPositionHeight && defined(options.extrudedHeight);\n  let height = defaultValue(options.height, 0.0);\n  let extrudedHeight = defaultValue(options.extrudedHeight, height);\n\n  if (!perPositionHeightExtrude) {\n    const h = Math.max(height, extrudedHeight);\n    extrudedHeight = Math.min(height, extrudedHeight);\n    height = h;\n  }\n\n  this._vertexFormat = VertexFormat.clone(vertexFormat);\n  this._ellipsoid = Ellipsoid.clone(ellipsoid);\n  this._granularity = granularity;\n  this._stRotation = stRotation;\n  this._height = height;\n  this._extrudedHeight = extrudedHeight;\n  this._closeTop = defaultValue(options.closeTop, true);\n  this._closeBottom = defaultValue(options.closeBottom, true);\n  this._polygonHierarchy = polygonHierarchy;\n  this._perPositionHeight = perPositionHeight;\n  this._perPositionHeightExtrude = perPositionHeightExtrude;\n  this._shadowVolume = defaultValue(options.shadowVolume, false);\n  this._workerName = \"createPolygonGeometry\";\n  this._offsetAttribute = options.offsetAttribute;\n  this._arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n\n  this._rectangle = undefined;\n  this._textureCoordinateRotationPoints = undefined;\n  this._textureCoordinates = textureCoordinates;\n\n  /**\n   * The number of elements used to pack the object into an array.\n   * @type {Number}\n   */\n  this.packedLength =\n    PolygonGeometryLibrary.computeHierarchyPackedLength(\n      polygonHierarchy,\n      Cartesian3\n    ) +\n    Ellipsoid.packedLength +\n    VertexFormat.packedLength +\n    (textureCoordinates\n      ? PolygonGeometryLibrary.computeHierarchyPackedLength(\n          textureCoordinates,\n          Cartesian2\n        )\n      : 1) +\n    12;\n}\n\n/**\n * A description of a polygon from an array of positions. Polygon geometry can be rendered with both {@link Primitive} and {@link GroundPrimitive}.\n *\n * @param {Object} options Object with the following properties:\n * @param {Cartesian3[]} options.positions An array of positions that defined the corner points of the polygon.\n * @param {Number} [options.height=0.0] The height of the polygon.\n * @param {Number} [options.extrudedHeight] The height of the polygon extrusion.\n * @param {VertexFormat} [options.vertexFormat=VertexFormat.DEFAULT] The vertex attributes to be computed.\n * @param {Number} [options.stRotation=0.0] The rotation of the texture coordinates, in radians. A positive rotation is counter-clockwise.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions in the buffer.\n * @param {Boolean} [options.perPositionHeight=false] Use the height of options.positions for each position instead of using options.height to determine the height.\n * @param {Boolean} [options.closeTop=true] When false, leaves off the top of an extruded polygon open.\n * @param {Boolean} [options.closeBottom=true] When false, leaves off the bottom of an extruded polygon open.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {PolygonHierarchy} [options.textureCoordinates] Texture coordinates as a {@link PolygonHierarchy} of {@link Cartesian2} points. Has no effect for ground primitives.\n * @returns {PolygonGeometry}\n *\n * @example\n * // create a polygon from points\n * const polygon = Cesium.PolygonGeometry.fromPositions({\n *   positions : Cesium.Cartesian3.fromDegreesArray([\n *     -72.0, 40.0,\n *     -70.0, 35.0,\n *     -75.0, 30.0,\n *     -70.0, 30.0,\n *     -68.0, 40.0\n *   ])\n * });\n * const geometry = Cesium.PolygonGeometry.createGeometry(polygon);\n *\n * @see PolygonGeometry#createGeometry\n */\nPolygonGeometry.fromPositions = function (options) {\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT);\n\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"options.positions\", options.positions);\n  //>>includeEnd('debug');\n\n  const newOptions = {\n    polygonHierarchy: {\n      positions: options.positions,\n    },\n    height: options.height,\n    extrudedHeight: options.extrudedHeight,\n    vertexFormat: options.vertexFormat,\n    stRotation: options.stRotation,\n    ellipsoid: options.ellipsoid,\n    granularity: options.granularity,\n    perPositionHeight: options.perPositionHeight,\n    closeTop: options.closeTop,\n    closeBottom: options.closeBottom,\n    offsetAttribute: options.offsetAttribute,\n    arcType: options.arcType,\n    textureCoordinates: options.textureCoordinates,\n  };\n  return new PolygonGeometry(newOptions);\n};\n\n/**\n * Stores the provided instance into the provided array.\n *\n * @param {PolygonGeometry} value The value to pack.\n * @param {Number[]} array The array to pack into.\n * @param {Number} [startingIndex=0] The index into the array at which to start packing the elements.\n *\n * @returns {Number[]} The array that was packed into\n */\nPolygonGeometry.pack = function (value, array, startingIndex) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"value\", value);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n    value._polygonHierarchy,\n    array,\n    startingIndex,\n    Cartesian3\n  );\n\n  Ellipsoid.pack(value._ellipsoid, array, startingIndex);\n  startingIndex += Ellipsoid.packedLength;\n\n  VertexFormat.pack(value._vertexFormat, array, startingIndex);\n  startingIndex += VertexFormat.packedLength;\n\n  array[startingIndex++] = value._height;\n  array[startingIndex++] = value._extrudedHeight;\n  array[startingIndex++] = value._granularity;\n  array[startingIndex++] = value._stRotation;\n  array[startingIndex++] = value._perPositionHeightExtrude ? 1.0 : 0.0;\n  array[startingIndex++] = value._perPositionHeight ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeTop ? 1.0 : 0.0;\n  array[startingIndex++] = value._closeBottom ? 1.0 : 0.0;\n  array[startingIndex++] = value._shadowVolume ? 1.0 : 0.0;\n  array[startingIndex++] = defaultValue(value._offsetAttribute, -1);\n  array[startingIndex++] = value._arcType;\n  if (defined(value._textureCoordinates)) {\n    startingIndex = PolygonGeometryLibrary.packPolygonHierarchy(\n      value._textureCoordinates,\n      array,\n      startingIndex,\n      Cartesian2\n    );\n  } else {\n    array[startingIndex++] = -1.0;\n  }\n  array[startingIndex++] = value.packedLength;\n  return array;\n};\n\nconst scratchEllipsoid = Ellipsoid.clone(Ellipsoid.UNIT_SPHERE);\nconst scratchVertexFormat = new VertexFormat();\n\n//Only used to avoid inability to default construct.\nconst dummyOptions = {\n  polygonHierarchy: {},\n};\n\n/**\n * Retrieves an instance from a packed array.\n *\n * @param {Number[]} array The packed array.\n * @param {Number} [startingIndex=0] The starting index of the element to be unpacked.\n * @param {PolygonGeometry} [result] The object into which to store the result.\n */\nPolygonGeometry.unpack = function (array, startingIndex, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.defined(\"array\", array);\n  //>>includeEnd('debug');\n\n  startingIndex = defaultValue(startingIndex, 0);\n\n  const polygonHierarchy = PolygonGeometryLibrary.unpackPolygonHierarchy(\n    array,\n    startingIndex,\n    Cartesian3\n  );\n  startingIndex = polygonHierarchy.startingIndex;\n  delete polygonHierarchy.startingIndex;\n\n  const ellipsoid = Ellipsoid.unpack(array, startingIndex, scratchEllipsoid);\n  startingIndex += Ellipsoid.packedLength;\n\n  const vertexFormat = VertexFormat.unpack(\n    array,\n    startingIndex,\n    scratchVertexFormat\n  );\n  startingIndex += VertexFormat.packedLength;\n\n  const height = array[startingIndex++];\n  const extrudedHeight = array[startingIndex++];\n  const granularity = array[startingIndex++];\n  const stRotation = array[startingIndex++];\n  const perPositionHeightExtrude = array[startingIndex++] === 1.0;\n  const perPositionHeight = array[startingIndex++] === 1.0;\n  const closeTop = array[startingIndex++] === 1.0;\n  const closeBottom = array[startingIndex++] === 1.0;\n  const shadowVolume = array[startingIndex++] === 1.0;\n  const offsetAttribute = array[startingIndex++];\n  const arcType = array[startingIndex++];\n  const textureCoordinates =\n    array[startingIndex] === -1.0\n      ? undefined\n      : PolygonGeometryLibrary.unpackPolygonHierarchy(\n          array,\n          startingIndex,\n          Cartesian2\n        );\n  if (defined(textureCoordinates)) {\n    startingIndex = textureCoordinates.startingIndex;\n    delete textureCoordinates.startingIndex;\n  } else {\n    startingIndex++;\n  }\n  const packedLength = array[startingIndex++];\n\n  if (!defined(result)) {\n    result = new PolygonGeometry(dummyOptions);\n  }\n\n  result._polygonHierarchy = polygonHierarchy;\n  result._ellipsoid = Ellipsoid.clone(ellipsoid, result._ellipsoid);\n  result._vertexFormat = VertexFormat.clone(vertexFormat, result._vertexFormat);\n  result._height = height;\n  result._extrudedHeight = extrudedHeight;\n  result._granularity = granularity;\n  result._stRotation = stRotation;\n  result._perPositionHeightExtrude = perPositionHeightExtrude;\n  result._perPositionHeight = perPositionHeight;\n  result._closeTop = closeTop;\n  result._closeBottom = closeBottom;\n  result._shadowVolume = shadowVolume;\n  result._offsetAttribute =\n    offsetAttribute === -1 ? undefined : offsetAttribute;\n  result._arcType = arcType;\n  result._textureCoordinates = textureCoordinates;\n  result.packedLength = packedLength;\n\n  return result;\n};\n\n/**\n * Returns the bounding rectangle given the provided options\n *\n * @param {Object} options Object with the following properties:\n * @param {PolygonHierarchy} options.polygonHierarchy A polygon hierarchy that can include holes.\n * @param {Number} [options.granularity=CesiumMath.RADIANS_PER_DEGREE] The distance, in radians, between each latitude and longitude. Determines the number of positions sampled.\n * @param {ArcType} [options.arcType=ArcType.GEODESIC] The type of line the polygon edges must follow. Valid options are {@link ArcType.GEODESIC} and {@link ArcType.RHUMB}.\n * @param {Ellipsoid} [options.ellipsoid=Ellipsoid.WGS84] The ellipsoid to be used as a reference.\n * @param {Rectangle} [result] An object in which to store the result.\n *\n * @returns {Rectangle} The result rectangle\n */\nPolygonGeometry.computeRectangle = function (options, result) {\n  //>>includeStart('debug', pragmas.debug);\n  Check.typeOf.object(\"options\", options);\n  Check.typeOf.object(\"options.polygonHierarchy\", options.polygonHierarchy);\n  //>>includeEnd('debug');\n\n  const granularity = defaultValue(\n    options.granularity,\n    CesiumMath.RADIANS_PER_DEGREE\n  );\n  const arcType = defaultValue(options.arcType, ArcType.GEODESIC);\n  //>>includeStart('debug', pragmas.debug);\n  if (arcType !== ArcType.GEODESIC && arcType !== ArcType.RHUMB) {\n    throw new DeveloperError(\n      \"Invalid arcType. Valid options are ArcType.GEODESIC and ArcType.RHUMB.\"\n    );\n  }\n  //>>includeEnd('debug');\n\n  const polygonHierarchy = options.polygonHierarchy;\n  const ellipsoid = defaultValue(options.ellipsoid, Ellipsoid.WGS84);\n\n  return computeRectangle(\n    polygonHierarchy.positions,\n    ellipsoid,\n    arcType,\n    granularity,\n    result\n  );\n};\n\n/**\n * Computes the geometric representation of a polygon, including its vertices, indices, and a bounding sphere.\n *\n * @param {PolygonGeometry} polygonGeometry A description of the polygon.\n * @returns {Geometry|undefined} The computed vertices and indices.\n */\nPolygonGeometry.createGeometry = function (polygonGeometry) {\n  const vertexFormat = polygonGeometry._vertexFormat;\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const granularity = polygonGeometry._granularity;\n  const stRotation = polygonGeometry._stRotation;\n  const polygonHierarchy = polygonGeometry._polygonHierarchy;\n  const perPositionHeight = polygonGeometry._perPositionHeight;\n  const closeTop = polygonGeometry._closeTop;\n  const closeBottom = polygonGeometry._closeBottom;\n  const arcType = polygonGeometry._arcType;\n  const textureCoordinates = polygonGeometry._textureCoordinates;\n\n  const hasTextureCoordinates = defined(textureCoordinates);\n\n  let outerPositions = polygonHierarchy.positions;\n  if (outerPositions.length < 3) {\n    return;\n  }\n\n  const tangentPlane = EllipsoidTangentPlane.fromPoints(\n    outerPositions,\n    ellipsoid\n  );\n\n  const results = PolygonGeometryLibrary.polygonsFromHierarchy(\n    polygonHierarchy,\n    hasTextureCoordinates,\n    tangentPlane.projectPointsOntoPlane.bind(tangentPlane),\n    !perPositionHeight,\n    ellipsoid\n  );\n\n  const hierarchy = results.hierarchy;\n  const polygons = results.polygons;\n\n  const dummyFunction = function (identity) {\n    return identity;\n  };\n\n  const textureCoordinatePolygons = hasTextureCoordinates\n    ? PolygonGeometryLibrary.polygonsFromHierarchy(\n        textureCoordinates,\n        true,\n        dummyFunction,\n        false\n      ).polygons\n    : undefined;\n\n  if (hierarchy.length === 0) {\n    return;\n  }\n\n  outerPositions = hierarchy[0].outerRing;\n  const boundingRectangle = PolygonGeometryLibrary.computeBoundingRectangle(\n    tangentPlane.plane.normal,\n    tangentPlane.projectPointOntoPlane.bind(tangentPlane),\n    outerPositions,\n    stRotation,\n    scratchBoundingRectangle\n  );\n\n  const geometries = [];\n\n  const height = polygonGeometry._height;\n  const extrudedHeight = polygonGeometry._extrudedHeight;\n  const extrude =\n    polygonGeometry._perPositionHeightExtrude ||\n    !CesiumMath.equalsEpsilon(height, extrudedHeight, 0, CesiumMath.EPSILON2);\n\n  const options = {\n    perPositionHeight: perPositionHeight,\n    vertexFormat: vertexFormat,\n    geometry: undefined,\n    tangentPlane: tangentPlane,\n    boundingRectangle: boundingRectangle,\n    ellipsoid: ellipsoid,\n    stRotation: stRotation,\n    textureCoordinates: undefined,\n    bottom: false,\n    top: true,\n    wall: false,\n    extrude: false,\n    arcType: arcType,\n  };\n\n  let i;\n\n  if (extrude) {\n    options.extrude = true;\n    options.top = closeTop;\n    options.bottom = closeBottom;\n    options.shadowVolume = polygonGeometry._shadowVolume;\n    options.offsetAttribute = polygonGeometry._offsetAttribute;\n    for (i = 0; i < polygons.length; i++) {\n      const splitGeometry = createGeometryFromPositionsExtruded(\n        ellipsoid,\n        polygons[i],\n        hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n        granularity,\n        hierarchy[i],\n        perPositionHeight,\n        closeTop,\n        closeBottom,\n        vertexFormat,\n        arcType\n      );\n\n      let topAndBottom;\n      if (closeTop && closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          topAndBottom.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n      } else if (closeTop) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          height,\n          ellipsoid,\n          !perPositionHeight\n        );\n        options.geometry = topAndBottom.geometry;\n      } else if (closeBottom) {\n        topAndBottom = splitGeometry.topAndBottom;\n        topAndBottom.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n          topAndBottom.geometry.attributes.position.values,\n          extrudedHeight,\n          ellipsoid,\n          true\n        );\n        options.geometry = topAndBottom.geometry;\n      }\n      if (closeTop || closeBottom) {\n        options.wall = false;\n        topAndBottom.geometry = computeAttributes(options);\n        geometries.push(topAndBottom);\n      }\n\n      const walls = splitGeometry.walls;\n      options.wall = true;\n      for (let k = 0; k < walls.length; k++) {\n        const wall = walls[k];\n        options.geometry = PolygonGeometryLibrary.scaleToGeodeticHeightExtruded(\n          wall.geometry,\n          height,\n          extrudedHeight,\n          ellipsoid,\n          perPositionHeight\n        );\n        wall.geometry = computeAttributes(options);\n        geometries.push(wall);\n      }\n    }\n  } else {\n    for (i = 0; i < polygons.length; i++) {\n      const geometryInstance = new GeometryInstance({\n        geometry: PolygonGeometryLibrary.createGeometryFromPositions(\n          ellipsoid,\n          polygons[i],\n          hasTextureCoordinates ? textureCoordinatePolygons[i] : undefined,\n          granularity,\n          perPositionHeight,\n          vertexFormat,\n          arcType\n        ),\n      });\n      geometryInstance.geometry.attributes.position.values = PolygonPipeline.scaleToGeodeticHeight(\n        geometryInstance.geometry.attributes.position.values,\n        height,\n        ellipsoid,\n        !perPositionHeight\n      );\n      options.geometry = geometryInstance.geometry;\n\n      geometryInstance.geometry = computeAttributes(options);\n\n      if (defined(polygonGeometry._offsetAttribute)) {\n        const length =\n          geometryInstance.geometry.attributes.position.values.length;\n        const applyOffset = new Uint8Array(length / 3);\n        const offsetValue =\n          polygonGeometry._offsetAttribute === GeometryOffsetAttribute.NONE\n            ? 0\n            : 1;\n        arrayFill(applyOffset, offsetValue);\n        geometryInstance.geometry.attributes.applyOffset = new GeometryAttribute(\n          {\n            componentDatatype: ComponentDatatype.UNSIGNED_BYTE,\n            componentsPerAttribute: 1,\n            values: applyOffset,\n          }\n        );\n      }\n\n      geometries.push(geometryInstance);\n    }\n  }\n\n  const geometry = GeometryPipeline.combineInstances(geometries)[0];\n  geometry.attributes.position.values = new Float64Array(\n    geometry.attributes.position.values\n  );\n  geometry.indices = IndexDatatype.createTypedArray(\n    geometry.attributes.position.values.length / 3,\n    geometry.indices\n  );\n\n  const attributes = geometry.attributes;\n  const boundingSphere = BoundingSphere.fromVertices(\n    attributes.position.values\n  );\n\n  if (!vertexFormat.position) {\n    delete attributes.position;\n  }\n\n  return new Geometry({\n    attributes: attributes,\n    indices: geometry.indices,\n    primitiveType: geometry.primitiveType,\n    boundingSphere: boundingSphere,\n    offsetAttribute: polygonGeometry._offsetAttribute,\n  });\n};\n\n/**\n * @private\n */\nPolygonGeometry.createShadowVolume = function (\n  polygonGeometry,\n  minHeightFunc,\n  maxHeightFunc\n) {\n  const granularity = polygonGeometry._granularity;\n  const ellipsoid = polygonGeometry._ellipsoid;\n\n  const minHeight = minHeightFunc(granularity, ellipsoid);\n  const maxHeight = maxHeightFunc(granularity, ellipsoid);\n\n  return new PolygonGeometry({\n    polygonHierarchy: polygonGeometry._polygonHierarchy,\n    ellipsoid: ellipsoid,\n    stRotation: polygonGeometry._stRotation,\n    granularity: granularity,\n    perPositionHeight: false,\n    extrudedHeight: minHeight,\n    height: maxHeight,\n    vertexFormat: VertexFormat.POSITION_ONLY,\n    shadowVolume: true,\n    arcType: polygonGeometry._arcType,\n  });\n};\n\nfunction textureCoordinateRotationPoints(polygonGeometry) {\n  const stRotation = -polygonGeometry._stRotation;\n  if (stRotation === 0.0) {\n    return [0, 0, 0, 1, 1, 0];\n  }\n  const ellipsoid = polygonGeometry._ellipsoid;\n  const positions = polygonGeometry._polygonHierarchy.positions;\n  const boundingRectangle = polygonGeometry.rectangle;\n  return Geometry._textureCoordinateRotationPoints(\n    positions,\n    stRotation,\n    ellipsoid,\n    boundingRectangle\n  );\n}\n\nObject.defineProperties(PolygonGeometry.prototype, {\n  /**\n   * @private\n   */\n  rectangle: {\n    get: function () {\n      if (!defined(this._rectangle)) {\n        const positions = this._polygonHierarchy.positions;\n        this._rectangle = computeRectangle(\n          positions,\n          this._ellipsoid,\n          this._arcType,\n          this._granularity\n        );\n      }\n\n      return this._rectangle;\n    },\n  },\n  /**\n   * For remapping texture coordinates when rendering PolygonGeometries as GroundPrimitives.\n   * @private\n   */\n  textureCoordinateRotationPoints: {\n    get: function () {\n      if (!defined(this._textureCoordinateRotationPoints)) {\n        this._textureCoordinateRotationPoints = textureCoordinateRotationPoints(\n          this\n        );\n      }\n      return this._textureCoordinateRotationPoints;\n    },\n  },\n});\nexport default PolygonGeometry;\n","import defined from \"../Core/defined.js\";\nimport Ellipsoid from \"../Core/Ellipsoid.js\";\nimport PolygonGeometry from \"../Core/PolygonGeometry.js\";\n\nfunction createPolygonGeometry(polygonGeometry, offset) {\n  if (defined(offset)) {\n    polygonGeometry = PolygonGeometry.unpack(polygonGeometry, offset);\n  }\n  polygonGeometry._ellipsoid = Ellipsoid.clone(polygonGeometry._ellipsoid);\n  return PolygonGeometry.createGeometry(polygonGeometry);\n}\nexport default createPolygonGeometry;\n"],"names":["scratchCarto1","Cartographic","scratchCarto2","adjustPosHeightsForNormal","position","p1","p2","ellipsoid","height","cartesianToCartographic","p1Carto","cartographicToCartesian","p2Carto","scratchBoundingRectangle","BoundingRectangle","scratchPosition","Cartesian3","scratchNormal","scratchTangent","scratchBitangent","p1Scratch","p2Scratch","scratchPerPosNormal","scratchPerPosTangent","scratchPerPosBitangent","appendTextureCoordinatesOrigin","Cartesian2","appendTextureCoordinatesCartesian2","appendTextureCoordinatesCartesian3","appendTextureCoordinatesQuaternion","Quaternion","appendTextureCoordinatesMatrix3","Matrix3","tangentMatrixScratch","computeAttributes","options","vertexFormat","geometry","shadowVolume","flatPositions","attributes","values","flatTexcoords","defined","st","undefined","length","wall","top","bottom","normal","tangent","bitangent","boundingRectangle","tangentPlane","stRotation","perPositionHeight","origin","x","y","textureCoordinates","Float32Array","normals","tangents","bitangents","extrudeNormals","textureCoordIndex","attrIndex","recomputeNormal","textureMatrix","tangentRotationMatrix","rotation","fromAxisAngle","_plane","fromQuaternion","clone","IDENTITY","bottomOffset","bottomOffset2","i","fromArray","p","multiplyByVector","scaleToGeodeticSurface","projectPointOntoPlane","subtract","stx","CesiumMath","clamp","width","sty","attrIndex1","attrIndex2","normalize","cross","equalsEpsilon","EPSILON10","geodeticSurfaceNormal","UNIT_Z","z","GeometryAttribute","componentDatatype","ComponentDatatype","FLOAT","componentsPerAttribute","extrudeDirection","extrude","offsetAttribute","size","Uint8Array","GeometryOffsetAttribute","TOP","arrayFill","offsetValue","NONE","applyOffset","UNSIGNED_BYTE","startCartographicScratch","endCartographicScratch","idlCross","westOverIDL","eastOverIDL","ellipsoidGeodesic","EllipsoidGeodesic","computeRectangle","positions","arcType","granularity","result","defaultValue","Rectangle","west","north","south","east","ArcType","RHUMB","fromCartesianArray","equals","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","inverseChordLength","chordLength","maximumRadius","positionsLength","swap","endCartographic","startCartographic","setEndPoints","interpolateAndGrowRectangle","PI","TWO_PI","interpolatedCartographicScratch","segmentLength","surfaceDistance","numPoints","Math","ceil","subsegmentDistance","interpolationDistance","interpolatedCartographic","interpolateUsingSurfaceDistance","longitude","latitude","min","max","lonAdjusted","createGeometryFromPositionsExtrudedPositions","createGeometryFromPositionsExtruded","polygon","hierarchy","closeTop","closeBottom","geos","walls","topGeo","PolygonGeometryLibrary","createGeometryFromPositions","edgePoints","indices","numPositions","newIndices","topBottomPositions","concat","IndexDatatype","createTypedArray","set","ilength","i0","i1","i2","texcoords","topAndBottom","GeometryInstance","outerRing","EllipsoidTangentPlane","fromPoints","positions2D","projectPointsOntoPlane","windingOrder","PolygonPipeline","computeWindingOrder2D","WindingOrder","CLOCKWISE","slice","reverse","wallGeo","computeWallGeometry","push","holes","hole","COUNTER_CLOCKWISE","PolygonGeometry","Check","typeOf","object","polygonHierarchy","DeveloperError","GEODESIC","VertexFormat","DEFAULT","Ellipsoid","WGS84","RADIANS_PER_DEGREE","perPositionHeightExtrude","extrudedHeight","h","this","_vertexFormat","_ellipsoid","_granularity","_stRotation","_height","_extrudedHeight","_closeTop","_closeBottom","_polygonHierarchy","_perPositionHeight","_perPositionHeightExtrude","_shadowVolume","_workerName","_offsetAttribute","_arcType","_rectangle","_textureCoordinateRotationPoints","_textureCoordinates","packedLength","computeHierarchyPackedLength","fromPositions","EMPTY_OBJECT","pack","value","array","startingIndex","packPolygonHierarchy","scratchEllipsoid","UNIT_SPHERE","scratchVertexFormat","dummyOptions","unpack","unpackPolygonHierarchy","createGeometry","polygonGeometry","hasTextureCoordinates","outerPositions","results","polygonsFromHierarchy","bind","polygons","textureCoordinatePolygons","identity","computeBoundingRectangle","plane","geometries","EPSILON2","splitGeometry","scaleToGeodeticHeightExtruded","scaleToGeodeticHeight","k","geometryInstance","GeometryPipeline","combineInstances","Float64Array","boundingSphere","BoundingSphere","fromVertices","Geometry","primitiveType","createShadowVolume","minHeightFunc","maxHeightFunc","minHeight","maxHeight","POSITION_ONLY","Object","defineProperties","prototype","rectangle","get","textureCoordinateRotationPoints","offset"],"mappings":"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"}